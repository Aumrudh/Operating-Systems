Script started on Thursday 12 September 2019 05:19:16 PM IST

//SCHEDULING ALGORITHMS USING LINKED LIST

[18bit034@mepcolinux recpu]$cat fcfs.c 


//FCFS

#include<stdio.h>
#include<string.h>
#include<stdlib.h>

typedef struct FCFS
{
        float wt;
        float tt;
        float bt;
        int pno;

}fcfs;

typedef struct listnode
{
fcfs pr;
struct listnode *next;
}node;
typedef node *ptrtonode;
typedef ptrtonode list;
typedef ptrtonode position;

list initialize();
void insert(int,float,list);
void display(list);
int count(list);
position calculate(list,int);

void display(list l)
{
int c=0;
position p=l->next;
printf("\nPno\tWT\t TT\t BT\n");
while(p!='\0')
{
printf("\n%d \t%.2f\t%.2f\t%.2f",p->pr.pno,p->pr.wt,p->pr.tt,p->pr.bt);
c++;
p=p->next;
}
}
position calculate(list l,int n)
{
        float totwt=0,tottt=0,avgwt,agtt;

        position xx;
        position p,q,temp;
        p=l->next;
        xx=l->next;
        p->pr.wt=0;
        p->pr.tt=p->pr.bt;
        q=p;
        p=p->next;
        while(p!=NULL)
        {

                p->pr.wt=q->pr.tt;
                p->pr.tt=q->pr.tt+p->pr.bt;
                totwt=totwt+p->pr.wt;
                tottt=tottt+p->pr.tt;
                p=p->next;
                q=q->next;
                display(l);
                l->next=xx->next;
                display(l);
                xx=xx->next;
                printf("\nTotal waiting time\t%.2f\nTotal TurnArond time %.2f\n",totwt,tottt);
        }
        printf("\nAverage waitingtime\t%.2f\nAverage Turn Around time\t%.2f\n",totwt/n,tottt/n);
                return l;
}


int count(list l)
{
position p;
int count=1;
p=l->next;
while(p!=NULL)
{
count++;
p=p->next;
}
return count;
}

void insert(int pn,float btt,list l)
{

position temp1;
temp1=(position)malloc(sizeof(position)*1);
temp1->pr.pno=pn;
temp1->pr.bt=btt;
temp1->pr.tt=0;
temp1->pr.tt=0;


position p1,q;
q=l;
p1=l->next;
while(p1!=NULL)
{
q=q->next;
p1=p1->next;
}
temp1->next=NULL;
p1=temp1;
q->next=p1;
}

position initialize()
{
position temp;
temp=(position)malloc(sizeof(position)*1);
if(temp==NULL)
{
printf("\nError in initialize\n");
 }
else
{

temp->pr.bt=0;
temp->pr.tt=0;
temp->pr.wt=0;
temp->pr.pno=0;
temp->next=NULL;

return temp;
  }
}


main()
{
int ch;

int a,i;
float B;
list l1;
l1=initialize();
int nn;
printf("\nEnter total no of Process : ");
scanf("%d",&nn);
for(i=0;i<nn;i++)
{
printf("\nEnter process no : ");
scanf("%d",&a);
printf("\nEnter burst time : ");
scanf("%f",&B);
insert(a,B,l1);


}

l1=calculate(l1,nn);


int tt;
tt=count(l1);
printf("\n\nTotal no of nodes %d \n",tt);

}
[18bit034@mepcolinux recpu]$cc fcfs.c 
[18bit034@mepcolinux recpu]$./a.out 

Enter total no of Process : 4

Enter process no : 1

Enter burst time : 5

Enter process no : 2

Enter burst time : 10

Enter process no : 3

Enter burst time : 5

Enter process no : 4

Enter burst time : 15

Pno	WT	 TT	 BT

1 	0.00	5.00	5.00
2 	5.00	15.00	10.00
3 	0.00	0.00	5.00
4 	0.00	0.00	15.00
Pno	WT	 TT	 BT

2 	5.00	15.00	10.00
3 	0.00	0.00	5.00
4 	0.00	0.00	15.00
Total waiting time	5.00
Total TurnArond time 15.00

Pno	WT	 TT	 BT

2 	5.00	15.00	10.00
3 	15.00	20.00	5.00
4 	0.00	0.00	15.00
Pno	WT	 TT	 BT

3 	15.00	20.00	5.00
4 	0.00	0.00	15.00
Total waiting time	20.00
Total TurnArond time 35.00

Pno	WT	 TT	 BT

3 	15.00	20.00	5.00
4 	20.00	35.00	15.00
Pno	WT	 TT	 BT

4 	20.00	35.00	15.00

Total waiting time : 40.00
Total TurnArond time :  70.00

Average waitingtime : 10.00
Average Turn Around time : 17.50


Total no of nodes 2 


[18bit034@mepcolinux recpu]$cat nonpre.c 

//NON PREMPTIVE

#include<stdio.h>
#include<string.h>
#include<stdlib.h>

typedef struct NOPRI
{
        int at;
	float ct;
        float bt2;
        float wt;
        float tt;
        float bt;
        int pno;

}nonpri;

typedef struct listnode
{
nonpri pr;
struct listnode *next;
}node;
typedef node *ptrtonode;
typedef ptrtonode list;
typedef ptrtonode position;

list initialize();
void insert(int,float,int,list);
void display(list);
int count(list);
void calculate(list,int);
position sortbt(list);
position sortat(list);
position sortpno(list);

position sortpno(list l)
{
position temp;
temp=(position)malloc(sizeof(position)*1);

position p,q;

for(p=l->next;p->next!=NULL;p=p->next)
{

for(q=p->next;q!=NULL;q=q->next)
{
if(p->pr.pno>q->pr.pno)

{
nonpri  temp;
temp=p->pr;
p->pr=q->pr;
q->pr=temp;
}
}
}
return l;
}



position sortbt(list l)
{
position p,q;

for(p=l->next;p->next!=NULL;p=p->next)
{

for(q=p->next;q!=NULL;q=q->next)
{
if(p->pr.bt>q->pr.bt)

{
nonpri  temp;
temp=p->pr;
p->pr=q->pr;
q->pr=temp;
}
}
}
return l;
}



position sortat(list l)
{

position p,q;

for(p=l->next;p->next!=NULL;p=p->next)
{

for(q=p->next;q!=NULL;q=q->next)
{
if(p->pr.at>q->pr.at)

{
nonpri temp;
temp=p->pr;
p->pr=q->pr;
q->pr=temp;
}
}
}
return l;
}

void display(list l)
{
float avgwt,avgtt,tottt=0,totwt=0;
int c=0;
position p=l->next;
printf("\nPNO\tAT\t BT\t WT\t TAT\t CT\n");
while(p!='\0')
{
printf("\n%d\t%d \t%.2f\t%.2f\t%.2f\t%.2f\n",p->pr.pno,p->pr.at,p->pr.bt2,p->pr.wt,p->pr.tt,p->pr.ct);
p=p->next;
}


}
void calculate(list ll,int n)
{
        position p,q,temp;
float tottt=0,totwt=0;
int index=0;
ll=sortat(ll);
        p=ll->next;
        index=p->pr.bt;
p->pr.bt=0;
        p->pr.ct=index;
        ll=sortbt(ll);
        p=ll->next;
p=p->next;
        while(p!=NULL)
        {
                index+=p->pr.bt;
                p->pr.ct=index;
                p=p->next;
               
        }
sortpno(ll);
p=ll->next;

while(p!=NULL)
{

p->pr.wt=p->pr.ct - p->pr.at - p->pr.bt2;
p->pr.tt=p->pr.bt2+p->pr.wt;
totwt+=p->pr.wt;
tottt+=p->pr.tt;
display(ll);
p=p->next;
ll->next=p;
}
display(ll);
printf("\n\n\n");
printf("Total Waiting itme is : %.2f\n",totwt);
printf("Total Turnarond  itme is : %.2f\n",tottt);
printf("Average  Waiting itme is :%.2f\n",totwt/n);
printf("Average Turn Arond time  is : %.2f\n",tottt/n);

}

int count(list l)
{
position p;
int count=1;
p=l->next;
while(p!=NULL)
{
count++;
p=p->next;
}
return count;
}

void insert(int pn,float btt,int A,list l)
{

position temp1;
temp1=(position)malloc(sizeof(position)*1);
temp1->pr.pno=pn;
temp1->pr.bt=btt;
temp1->pr.bt2=btt;
temp1->pr.tt=0;
temp1->pr.at=A;

position p1,q;
q=l;
p1=l->next;
while(p1!=NULL)
{
q=q->next;
p1=p1->next;
}
temp1->next=NULL;
p1=temp1;
q->next=p1;
}

position initialize()
{
position temp;
temp=(position)malloc(sizeof(position)*1);
if(temp==NULL)
{
printf("\nError in initialize\n");
 }
else
{

temp->pr.bt=0;
temp->pr.tt=0;
temp->pr.wt=0;
temp->pr.pno=0;
temp->pr.at=0;
temp->next=NULL;

return temp;
  }
}


main()
{
int ch;

int a,i;
float B;
int z;
list l1;
l1=initialize();
int nn;
printf("\nEnter total no of process : ");
scanf("%d",&nn);
for(i=0;i<nn;i++)
{
printf("\nEnter process no : ");
scanf("%d",&a);
printf("\nEnter burst time : ");
scanf("%f",&B);
printf("\nEnter arrival time : ");
scanf("%d",&z);
insert(a,B,z,l1);


}
calculate(l1,nn);


int tt;
tt=count(l1);
printf("\n\nTotal no of nodes %d \n",tt);

 }
[18bit034@mepcolinux recpu]$cc nonpre.c 
[18bit034@mepcolinux recpu]$./a.out 

Enter total no of process : 3

Enter process no : 1

Enter burst time : 15

Enter arrival time : 1

Enter process no : 5

Enter burst time : 22

Enter arrival time : 2

Enter process no : 2

Enter burst time : 5

Enter arrival time : 3

PNO	AT	 BT	 WT	 TAT	 CT

1	1 	15.00	-1.00	14.00	15.00

2	3 	5.00	0.00	0.00	20.00

5	2 	22.00	0.00	0.00	42.00

PNO	AT	 BT	 WT	 TAT	 CT

2	3 	5.00	12.00	17.00	20.00

5	2 	22.00	0.00	0.00	42.00

PNO	AT	 BT	 WT	 TAT	 CT

5	2 	22.00	18.00	40.00	42.00


Total Waiting itme is : 29.00
Total Turnarond  itme is : 71.00
Average  Waiting itme is :9.67
Average Turn Arond time  is : 23.67


Total no of nodes 1 


[18bit034@mepcolinux recpu]$cat pre.c 


//PREMPTIVE

#include<stdio.h>
#include<string.h>
#include<stdlib.h>

typedef struct NOPRI
{
        int at;
float ct;
        float bt2;
        float wt;
        float tt;
        float bt;
        int pno;

}nonpri;

typedef struct listnode
{
nonpri pr;
struct listnode *next;
}node;
typedef node *ptrtonode;
typedef ptrtonode list;
typedef ptrtonode position;

list initialize();
void insert(int,float,int,list);
void display(list);
int count(list);
void calculate(list,int,int);
position sortbt(list);
position sortat(list);
position sortpno(list);

position sortpno(list l)
{
position temp;
temp=(position)malloc(sizeof(position)*1);

position p,q;

for(p=l->next;p->next!=NULL;p=p->next)
{

for(q=p->next;q!=NULL;q=q->next)
{
if(p->pr.pno>q->pr.pno)

{
nonpri  temp;
temp=p->pr;
p->pr=q->pr;
q->pr=temp;
}
}
}
return l;
}



position sortbt(list l)
{
position p,q;

for(p=l->next;p->next!=NULL;p=p->next)
{

for(q=p->next;q!=NULL;q=q->next)
{
if(p->pr.bt>q->pr.bt)

{
nonpri  temp;
temp=p->pr;
p->pr=q->pr;
q->pr=temp;
}
}
}
return l;
}



position sortat(list l)
{

position p,q;

for(p=l->next;p->next!=NULL;p=p->next)
{

for(q=p->next;q!=NULL;q=q->next)
{
if(p->pr.at>q->pr.at)

{
nonpri temp;
temp=p->pr;
p->pr=q->pr;
q->pr=temp;
}
}
}
return l;
}

void display(list l)
{
float avgwt,avgtt,tottt=0,totwt=0;
int c=0;
position p=l->next;
printf("\n pno\tat\t bt\t wt\t tt\t ct\n");
while(p!='\0')
{
printf("\n %d\t%d \t%.2f\t%.2f\t%.2f\t%.2f\n",p->pr.pno,p->pr.at,p->pr.bt2,p->pr.wt,p->pr.tt,p->pr.ct);
p=p->next;
}


}
void calculate(list ll,int n,int mat)
{
printf("\nMaximum arrival time : %d\n",mat);
        position j,p,q,temp;
float tottt=0,totwt=0;
int index=0;
ll=sortat(ll);

        p=ll->next;
while(index<=mat)
{

        index++;
p->pr.bt--;
        for(j=ll->next;j!=NULL;j=j->next)
{
if(j!=p)
{
if((p->pr.bt>j->pr.bt)&&(j->pr.at<=index))
{
p=j;
}
}
}
}      
sortbt(ll);
for(j=ll->next;j!=NULL;j=j->next)
{
index+=j->pr.bt;
j->pr.ct=index;
}


/*
        ll=sortbt(ll);
        p=ll->next;
p=p->next;
        while(p!=NULL)
        {
                index+=p->pr.bt;
                p->pr.ct=index;
                p=p->next;
               
        }*/
sortpno(ll);
p=ll->next;

while(p!=NULL)
{

p->pr.wt=p->pr.ct - p->pr.at - p->pr.bt2;
p->pr.tt=p->pr.bt2+p->pr.wt;
totwt+=p->pr.wt;
tottt+=p->pr.tt;
display(ll);
p=p->next;
ll->next=p;
}
display(ll);
printf("\n\n\n");
printf("Total waiting itme is : %.2f\n",totwt);
printf("Total turnarond  itme is : %.2f\n",tottt);
printf("Average  waiting itme is : %.2f\n",totwt/n);
printf("Average turnarond time  is : %.2f\n",tottt/n);

}

int count(list l)
{
position p;
int count=1;
p=l->next;
while(p!=NULL)
{
count++;
p=p->next;
}
return count;
}

void insert(int pn,float btt,int A,list l)
{

position temp1;
temp1=(position)malloc(sizeof(position)*1);
temp1->pr.pno=pn;
temp1->pr.bt=btt;
temp1->pr.bt2=btt;
temp1->pr.tt=0;
temp1->pr.at=A;

position p1,q;
q=l;
p1=l->next;
while(p1!=NULL)
{
q=q->next;
p1=p1->next;
}
temp1->next=NULL;
p1=temp1;
q->next=p1;
}

position initialize()
{
position temp;
temp=(position)malloc(sizeof(position)*1);
if(temp==NULL)
{
printf("\nError in initialize\n");
 }
else
{

temp->pr.bt=0;
temp->pr.tt=0;
temp->pr.wt=0;
temp->pr.pno=0;
temp->pr.at=0;
temp->next=NULL;

return temp;
  }
}


main()
{
int ch;
int maxat=0;
int a,i;
float B;
int z;
list l1;
l1=initialize();
int nn;
printf("\nEnter total no of process : ");
scanf("%d",&nn);
for(i=0;i<nn;i++)
{
printf("\nEnter process no \n");
scanf("%d",&a);
printf("\nEnter burst time\n");
scanf("%f",&B);
printf("\nEnter arrival time \n");
scanf("%d",&z);
if(z>maxat)
maxat=z;
insert(a,B,z,l1);


}
calculate(l1,nn,maxat);


int tt;
tt=count(l1);
printf("\n\nTotal no of nodes %d \n",tt);

 }
[18bit034@mepcolinux recpu]$cc pre.c 
[18bit034@mepcolinux recpu]$./a.out 

Enter total no of process
3

Enter process no
1

Enter burst time
15

Enter arrival time 
1

Enter process no
5

Enter burst time
22

Enter arrival time 
2

Enter process no
2

Enter burst time
5

Enter arrival time 
3

Maximum arrival time : 3

 pno	at	 bt	 wt	 tt	 ct

 1	1 	15.00	4.00	19.00	20.00

 2	3 	5.00	0.00	0.00	8.00

 5	2 	22.00	0.00	0.00	42.00

 pno	at	 bt	 wt	 tt	 ct

 2	3 	5.00	0.00	5.00	8.00

 5	2 	22.00	0.00	0.00	42.00

 pno	at	 bt	 wt	 tt	 ct

 5	2 	22.00	18.00	40.00	42.00

 pno	at	 bt	 wt	 tt	 ct



Total waiting itme is : 22.00
Total turnarond  itme is : 64.00
Average  waiting itme is : 7.33
Average turnarond time  is : 21.33


Total no of nodes 1 


[18bit034@mepcolinux recpu]$exit
exit

Script done on Thursday 12 September 2019 05:29:54 PM IST
